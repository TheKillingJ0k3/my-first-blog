"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

# cd ~/th3ki11ingj0k3.pythonanywhere.com

# TUTORIAL
# A model in Django is a special kind of object â€“ it is saved in the database. (SQLite)
#
# activate venv: myvenv\Scripts\activate
# python manage.py migrate from DjangoGirls folder
# starting web server: python manage.py runserver
# create app: python manage.py startapp blog
# change models -> tell python we have changes in model: python manage.py makemigrations blog
# apply migration file to db: python manage.py migrate blog
# change admin.py
# create superuser to login: python manage.py createsuperuser (ggpat / GG-hotmail / PH@1gr => SAME IN PYTHONANYWHERE)
#login -> see Django admin dashboard

#Deploy = make site onine - server provider = PythonAnywhere
# add git init in project folder - git config name/email
# .gitignore to ignore files for updates (new file in VS Code saved in base dir)
# use separate databases for your local testing site and your live website on PythonAnywhere
# create PythonAnywhere account - yourusername.pythonanywhere.com
# create PythonAnywhere API token (4860c7b395d9bab1c7a647a6b9aa2b3842c2ef56)
# $ pip3.8 install --user pythonanywhere in PythonAnywhere Bash and then $ pa_autoconfigure_django.py --python=3.8 https://github.com/<your-github-username>/my-first-blog.git
# initialize the admin account with createsuperuser (virtualenv automatically activated) so we run (username.pythonanywhere.com) $ python manage.py createsuperuser

#urls: use urls.py / create new urls file inside blog
# we put the site logic in views: it reqursts info from model and pass it to a template


#TODO: even if pythonanywhere bash gives error at git pull, it still uploads files correctly

# Django's interactive console: python manage.py shell
# views connect models and templates so that we can see posts in our site / post_list view we will need to take the models we want to display and pass them to the template

#TODO:
'''
Now go ahead and try adding a new post in your Django admin (remember to add published_date!)
Make sure you are in the Django admin for your pythonanywhere site, https://subdomain.pythonanywhere.com/admin.
Then refresh your page to see if the post appears there.
This step does not post shit in my site'''

#create folder static in blog app
# create base template


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-v^g@3m0p4az_7*+2dr40^@05^07%a(1wy*t1lb3+k8=9&xbw(2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Athens'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
